import { WebSocket } from 'react-native-stream';
import { getAuthTokens } from './derivAuth';
export type MessageHandler = (data: any) => void;
interface QueuedMessage {
  message: string;
  handler?: MessageHandler;
}

interface DerivWSOptions {
  maxReconnectAttempts?: number;
}

declare global {
  interface WebSocket {
    ping?(): void;
  }
}

class DerivWS {
  private ws: WebSocket | null = null;
  private appId: string;
  private handlers: Record<string, MessageHandler> = {};
  private globalHandler: MessageHandler | null = null;
  private reqCounter = 1;
  private pingInterval: ReturnType<typeof setInterval> | null = null;
  private reconnectTimeout: ReturnType<typeof setTimeout> | null = null;
  private token: string;
  private messageQueue: QueuedMessage[] = [];
  private isConnected = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts: number;
  constructor(appId: string, options?: DerivWSOptions) {
    this.appId = appId;
    this.maxReconnectAttempts = options?.maxReconnectAttempts ?? 5;

    const token = getAuthTokens()?.[0]?.token;
    if (!token) {
      throw new Error('No auth token found');
    }
    this.token = token;

    this.connect();
  }

  private connect() {
    const url = `wss://ws.derivws.com/websockets/v3?app_id=${this.appId}`;
    this.ws = new WebSocket(url);

    this.ws.onopen = () => {
      this.isConnected = true;
      this.reconnectAttempts = 0;
      this.flushQueue();
      this.send({ authorize: this.token });
      this.startPing();
    };

    this.ws.onmessage = (event: WebSocketMessageEvent) => {
      const data = JSON.parse(event.data);
      const handler = data.req_id ? this.handlers[data.req_id] : null;
      if (handler) handler(data);
      if (this.globalHandler) this.globalHandler(data);
    };

    this.ws.onclose = () => this.handleReconnect();
    this.ws.onerror = (error) => {
      console.error('WebSocket error:', error);
      this.handleReconnect();
    };
  }

  private flushQueue() {
    this.messageQueue.forEach(({ message, handler }) => this.sendRaw(message, handler));
    this.messageQueue = [];
  }

  private handleReconnect() {
    this.isConnected = false;
    this.stopPing();
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      this.reconnectTimeout = setTimeout(() => this.connect(), 2000);
    } else {
      console.warn('Max reconnect attempts reached');
    }
  }

  private startPing() {
    if (this.ws && typeof this.ws.ping === 'function') {
      this.pingInterval = setInterval(() => this.ws?.ping?.(), 10000);
    }
  }

  private stopPing() {
    if (this.pingInterval) clearInterval(this.pingInterval);
  }

  private sendRaw(message: string, handler?: MessageHandler) {
    if (this.ws?.readyState === WebSocket.OPEN) {
      this.ws.send(message);
    } else {
      this.messageQueue.push({ message, handler });
    }
  }

  public send(payload: any, handler?: MessageHandler) {
    const req_id = this.reqCounter++;
    const message = JSON.stringify({ ...payload, req_id });
    if (handler) this.handlers[req_id] = handler;
    this.sendRaw(message, handler);
  }

  public setGlobalHandler(handler: MessageHandler) {
    this.globalHandler = handler;
  }
}

export default DerivWS;
